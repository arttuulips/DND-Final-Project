@page "/CreateBlogPost"
@using System.Security.Claims
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IUserService userService
@inject IBlogPostService blogPostService
@using UIComponents
@inject NavigationManager navMgr
@inject AuthenticationStateProvider AuthenticationStateProvider;
@attribute [Authorize]
<div class="card">
    @if (users == null)
    {
        <label>Loading users...</label>
    }
    else if (!users.Any())
    {
        <label>No users, you cannot create a BlogPost without authors.</label>
    }
    else
    {
        <h3>Create BlogPost</h3>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="blogPostTitle"/>
            <label>Content:</label>
            <input type="text" @bind="blogPostContent"/>
            <label>Country:</label>
            <input type="text" @bind="blogPostCountry"/>
        </div>
        <div class="form-group field">
            @*<label>Author:</label>
            $1$ <select @bind="selectedUserId"> #1#
            $1$     <option>Choose</option> #1#
            $1$     @foreach (User user in users) #1#
            $1$     { #1#
            $1$         <option value="@user.Id">@user.UserName</option> #1#
            $1$     } #1#
            $1$ </select> #1#*@
        </div>
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
    }
</div>

<Modal ShowModal="showModal">
    <p>You have successfully added a new BlogPost. You should be very proud of yourself!</p>
    <button @onclick="@Proceed">Wonderful</button>
</Modal>

@code {
    private IEnumerable<User>? users;
    private int? selectedUserId;
    private string blogPostTitle = "";
    private string blogPostContent = "";
    private string blogPostCountry = "";

    private string msg = "";
    
    private bool showModal;
 

/*protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        name = user.Identity!.Name;
        users = await userService.GetUsers(name);
    }*/
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    




protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        name = user.Identity!.Name;
        users = await userService.GetUsers(name);
    }
    

    private async Task Create()
    {
        msg = "";
        
        if (string.IsNullOrEmpty(blogPostTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(blogPostContent))
        {
            msg = "Content cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(blogPostCountry))
        {
            msg = "Country cannot be empty!";
            return;
        }

        try
        {
            BlogPostCreationDto dto = new(blogPostTitle, blogPostContent, blogPostCountry);
            await blogPostService.CreateAsync(dto);
            showModal = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void Proceed()
    {
        showModal = false;
        navMgr.NavigateTo("/ViewBlogPosts");
    }
}